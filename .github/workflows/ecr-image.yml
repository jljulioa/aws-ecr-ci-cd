name: ECR Test CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: eksdemo1
  REPOSITORY_URI: 125137910162.dkr.ecr.us-east-1.amazonaws.com/devops-kube-nginx
  IMAGE_TAG: ${{ github.run_number }} # GitHub run number as a unique image tag

# permission can be added at job level or workflow level
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  eks-ecr-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Capture GitHub Actions error message
        if: failure()
        id: capture-error
        run: echo "::set-output name=error_message::${{ toJson(needs.eks-ecr-workflow.outputs) }}"

      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::125137910162:role/GitHubAction-ECR_RoleWithAction
          role-session-name: ecrrolesessiontemp
          aws-region: ${{ env.AWS_REGION }}

      - name: Fail steps
        run: |
          echo Hello Jaime, world! && exit 1

      - name: Set image tag
        run: |
          echo "Setting image tag to ${{ env.IMAGE_TAG }}"
          sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$IMAGE_TAG"'@' kube-manifests/01-DEVOPS-Nginx-Deployment.yml

      - name: Login to AWS ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.REPOSITORY_URI }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.REPOSITORY_URI }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.REPOSITORY_URI }}:${{ env.IMAGE_TAG }}
      
      - name: cheking the aws cli config
        run: |
          aws configure list
      
      - name: Check kubectl
        run: |
          kubectl version --client
          kubectl config view

      - name: Update kube-confige files
        run: |
           aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Debug kubectl configuration
        run: |
          cat $HOME/.kube/config
          kubectl config current-context

      - name: Configure kubectl
        run: |
          export KUBECONFIG=$HOME/.kube/config

      - name: Debug IAM Role Permissions
        run: |
          aws ecr describe-repositories
          aws eks describe-cluster --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - name: Deploy to EKS
        run: |
          kubectl get svc
          kubectl apply -f kube-manifests/
          
  send-whatsapp-notification:
      runs-on: ubuntu-latest
      needs: eks-ecr-workflow
      if: failure()
      env:
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
        TO_WHATSAPP_NUMBER: ${{ secrets.WHATSAPP_NUMBER }} 
      steps:
        - name: Send WhatsApp Notification on Failure
          run: |
            # Custom fail log message
            ERROR_MESSAGE="GitHub Actions workflow failed. Sending WhatsApp notification."
            echo "::error::${ERROR_MESSAGE}"

            # Extract GitHub Actions error message from the first job
            GH_ACTIONS_ERROR=$(echo "${{ needs.eks-ecr-workflow.outputs.value }}" | jq -r '.error_message')

            # Include GitHub Actions error message in the Body parameter
            BODY_MESSAGE="GitHub Actions workflow failed. Error: ${GH_ACTIONS_ERROR}"

            # Use the messaging service API to send the WhatsApp message
            curl 'https://api.twilio.com/2010-04-01/Accounts/AC63abeba3e5047c2fd853de5931ec0bb8/Messages.json' -X POST \
            --data-urlencode "Body=${BODY_MESSAGE}" \
            --data-urlencode "From=whatsapp:+14155238886" \
            --data-urlencode "To=whatsapp:${TO_WHATSAPP_NUMBER}" \
            -u "${TWILIO_ACCOUNT_SID}:${TWILIO_AUTH_TOKEN}"
